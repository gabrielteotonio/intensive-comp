// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// ArmaBase
arma::mat ArmaBase(const arma::mat& mat_1, const arma::mat& mat_2);
RcppExport SEXP _matrixProduct_ArmaBase(SEXP mat_1SEXP, SEXP mat_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mat_1(mat_1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mat_2(mat_2SEXP);
    rcpp_result_gen = Rcpp::wrap(ArmaBase(mat_1, mat_2));
    return rcpp_result_gen;
END_RCPP
}
// ArmaColumnRow
arma::mat ArmaColumnRow(const arma::mat& mat_1, const arma::mat& mat_2);
RcppExport SEXP _matrixProduct_ArmaColumnRow(SEXP mat_1SEXP, SEXP mat_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mat_1(mat_1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mat_2(mat_2SEXP);
    rcpp_result_gen = Rcpp::wrap(ArmaColumnRow(mat_1, mat_2));
    return rcpp_result_gen;
END_RCPP
}
// OpenMP
arma::mat OpenMP(const arma::mat& mat_1, const arma::mat& mat_2, int t);
RcppExport SEXP _matrixProduct_OpenMP(SEXP mat_1SEXP, SEXP mat_2SEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mat_1(mat_1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mat_2(mat_2SEXP);
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(OpenMP(mat_1, mat_2, t));
    return rcpp_result_gen;
END_RCPP
}
// RcppParallelLoop
Rcpp::NumericMatrix RcppParallelLoop(Rcpp::NumericMatrix mat_1, Rcpp::NumericMatrix mat_2);
RcppExport SEXP _matrixProduct_RcppParallelLoop(SEXP mat_1SEXP, SEXP mat_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type mat_1(mat_1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type mat_2(mat_2SEXP);
    rcpp_result_gen = Rcpp::wrap(RcppParallelLoop(mat_1, mat_2));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_matrixProduct_ArmaBase", (DL_FUNC) &_matrixProduct_ArmaBase, 2},
    {"_matrixProduct_ArmaColumnRow", (DL_FUNC) &_matrixProduct_ArmaColumnRow, 2},
    {"_matrixProduct_OpenMP", (DL_FUNC) &_matrixProduct_OpenMP, 3},
    {"_matrixProduct_RcppParallelLoop", (DL_FUNC) &_matrixProduct_RcppParallelLoop, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_matrixProduct(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
